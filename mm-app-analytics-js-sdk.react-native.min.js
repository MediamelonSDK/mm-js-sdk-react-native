/*!
 * MediaMelon App Analytics SDK v1.0.0
 * Copyright (c) 2024 MediaMelon
 * Licensed under MIT
 */
class e{constructor(){this._storage={},console.log("[RN STORAGE] ReactNativeStorage initialized")}async setItem(e,t){try{return this._storage[e]=JSON.stringify(t),!0}catch(e){return console.error("[RN STORAGE] setItem failed:",e),!1}}async getItem(e){try{const t=this._storage[e];return t?JSON.parse(t):null}catch(e){return console.error("[RN STORAGE] getItem failed:",e),null}}async removeItem(e){try{return delete this._storage[e],!0}catch(e){return console.error("[RN STORAGE] removeItem failed:",e),!1}}async clear(){try{return this._storage={},!0}catch(e){return console.error("[RN STORAGE] clear failed:",e),!1}}}class t{constructor(){console.log("[RN DEVICE] ReactNativeDeviceInfo initialized")}getDeviceType(){return"mobile"}getOS(){return"React Native"}getOSVersion(){return"1.0.0"}getBrowser(){return"React Native"}getBrowserVersion(){return"1.0.0"}getScreenRes(){return"375x667"}getScreenWidth(){return 375}getScreenHeight(){return 667}getColorDepth(){return 24}getPixelRatio(){return 2}}class i{constructor(e,t){this._eventPublisher=e,this._logger=t,this._isActive=!1,console.log("[RN AUTO] ReactNativeAutoCollection initialized")}isActive(){return this._isActive}setActive(e){this._isActive=e,console.log("[RN AUTO] Auto-collection set to:",e)}start(){this._isActive=!0,console.log("[RN AUTO] Auto-collection started")}stop(){this._isActive=!1,console.log("[RN AUTO] Auto-collection stopped")}}class r{constructor(){this.level="info"}info(e){console.log(`[INFO] ${e}`)}warn(e){console.warn(`[WARN] ${e}`)}error(e){console.error(`[ERROR] ${e}`)}debug(e){console.log(`[DEBUG] ${e}`)}}class s{static validateRequired(e,t){if(!e||"string"==typeof e&&""===e.trim())throw new Error(`${t} is required`);return!0}static validateString(e,t){if("string"!=typeof e)throw new Error(`${t} must be a string`);return!0}static validateObject(e,t){if(!e||"object"!=typeof e||Array.isArray(e))throw new Error(`${t} must be an object`);return!0}}class o{constructor(e){this._config=e,this._events=[],this._isProcessing=!1}async addEvent(e){return this._events.push(e),console.log(`[RN QUEUE] Event added: ${e.type}`),!0}async processEvents(){this._isProcessing||0===this._events.length||(this._isProcessing=!0,console.log(`[RN QUEUE] Processing ${this._events.length} events`),await new Promise((e=>setTimeout(e,100))),this._events=[],this._isProcessing=!1,console.log("[RN QUEUE] Events processed"))}}class n{constructor(){this._subscribers=new Map}subscribe(e,t){this._subscribers.has(e)||this._subscribers.set(e,[]),this._subscribers.get(e).push(t)}publish(e,t){(this._subscribers.get(e)||[]).forEach((e=>{try{e(t)}catch(e){console.error("[RN PUBLISHER] Error in callback:",e)}}))}}class a{constructor(){this._state=new Map}setState(e,t){this._state.set(e,t)}getState(e){return this._state.get(e)}clearState(){this._state.clear()}}class c{constructor(e){this._logger=e}handleError(e,t){this._logger.error(`Error in ${t}: ${e.message}`),console.error(`[RN ERROR] ${t}:`,e)}}class l{constructor(e){if(!e||"object"!=typeof e)throw new Error("Configuration must be an object");if(!e.customerId)throw new Error("Customer ID is required");if(!e.appId)throw new Error("App ID is required");if(!e.appName)throw new Error("App Name is required");if(!e.appVersion)throw new Error("App Version is required");this._config={customerId:e.customerId,appId:e.appId,appName:e.appName,appVersion:e.appVersion,sdkVersion:"1.0.0",platform:"react-native",dataSrc:"Application",sessionId:this._generateUUID(),...e},console.log("[RN CONFIG] React Native config initialized with platform:",this._config.platform)}_generateUUID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))}getSessionId(){return this._config.sessionId}getConfig(){return{...this._config}}getEventMetadata(){return{platform:this._config.platform,sdkVersion:this._config.sdkVersion,timestamp:Date.now()}}updateSessionId(e){this._config.sessionId=e}}class h{constructor(){this._version="1.0.0",this._isInitialized=!1,this._config=null,this._logger=new r,this._validator=s,this._eventQueue=null,this._eventPublisher=new n,this._stateManager=new a,this._errorHandler=new c(this._logger),this._storage=new e,this._deviceInfo=new t,this._autoCollection=new i(this._eventPublisher,this._logger),console.log("[RN SDK] React Native SDK instance created")}async initialize(e,t,i,r,s={},n={}){try{return this._logger.info("Initializing React Native SDK..."),this._isInitialized?void this._logger.warn("SDK already initialized"):(this._validator.validateRequired(e,"customerId"),this._validator.validateRequired(t,"appId"),this._validator.validateRequired(i,"appName"),this._validator.validateRequired(r,"appVersion"),this._validator.validateObject(s,"userInfo"),this._validator.validateObject(n,"sdkConfig"),this._config=new l({customerId:e,appId:t,appName:i,appVersion:r,...n}),this._eventQueue=new o(this._config),this._isInitialized=!0,this._logger.info("React Native SDK initialized successfully"),!0)}catch(e){throw this._errorHandler.handleError(e,"SDK initialization"),e}}isInitialized(){return this._isInitialized}setAutoCollectionEnabled(e){this._autoCollection&&(this._autoCollection.setActive(e),this._logger.info("Auto-collection "+(e?"enabled":"disabled")))}isAutoCollectionEnabled(){return!!this._autoCollection&&this._autoCollection.isActive()}getSessionInfo(){if(!this._isInitialized)throw new Error("SDK not initialized");return{sessionId:this._config.getSessionId(),isActive:this._isInitialized}}async trackEvent(e,t){if(!this._isInitialized)throw new Error("SDK not initialized");try{this._validator.validateRequired(e,"eventType"),this._validator.validateObject(t,"eventData");const i={type:e,data:t,timestamp:Date.now(),sessionId:this._config.getSessionId(),metadata:this._config.getEventMetadata()};return await this._eventQueue.addEvent(i),this._eventPublisher.publish(e,i),this._logger.info(`Event tracked: ${e}`),{success:!0,eventId:i.timestamp}}catch(e){throw this._errorHandler.handleError(e,"trackEvent"),e}}async trackUser(e,t){return this.trackEvent("user_tracked",{userId:e,...t})}async trackScreen(e,t){return this.trackEvent("screen_viewed",{screenName:e,...t})}async trackVideo(e,t){return this.trackEvent("video_tracked",{videoId:e,...t})}getSynchronizedTimestamp(){return Date.now()}getConfig(){return this._config?this._config.getConfig():null}getDeviceInfo(){return this._deviceInfo}getStorage(){return this._storage}getAutoCollection(){return this._autoCollection}}const u={version:"1.0.0",buildTime:(new Date).toISOString(),source:"src/sdk-entry-react-native.js",platform:"react-native"};export{c as ErrorHandler,n as EventPublisher,o as EventQueue,r as Logger,h as MMAppAnalyticsSDK,l as MMAppAnalyticsSDKConfig,a as StateManager,s as Validator,u as __MM_BUILD_INFO__};
//# sourceMappingURL=mm-app-analytics-js-sdk.react-native.min.js.map
